// import { Test, TestingModule } from '@nestjs/testing';
// import { UserService } from './user.service';
// import { User1Entity } from '../db/Entities/user.entity';
// import { Any, DataSource } from 'typeorm';
// import { UserController } from './user.controller';
// import {v4 as uuid} from "uuid"

// jest.setTimeout(30000)
// const AppDataSource= new DataSource({
//     type: "postgres",
//     host: "localhost",
//     port: 5432,
//     username: "postgres",
//     password: "sanju@123",
//     database: "postgres",
//     synchronize: true,
//     logging: false,
//     entities: [User1Entity],
//     subscribers: [],
//     migrations: [],
//     // uuidExtension:"pgcrypto"
// })

// let dummyUsers = [
//     { id: "1", name: "John", age: 21, lname: "Doe", email: "John@gmail.com", password: "password" },
//     { id: "2", name: "Jane", age: 22, lname: "Smith", email: "Jane@gmail.com", password: "password" },
//     { id: "3", name: "Chriss", age: 25, lname: "Hemsworth", email: "chris@gmail.com", password: "password" },
//     { id: "4", name: "Dave", age: 27, lname: "Gray", email: "dave@gmail.com", password: "password" },
// ]


// const dummyOneUser= { id: "1", name: "John", age: 21, lname: "Doe", email: "John@gmail.com", password: "password" }


// describe('UserService', () => {
//     let service: UserService;
//     beforeAll(async()=>{
//         await AppDataSource.initialize()
//     })

//     afterAll(async()=>{
//         await AppDataSource.destroy()
//     })
//     beforeEach(async () => {
//         const module: TestingModule = await Test.createTestingModule({
//             providers: [UserService],
//         }).compile();
//         service = module.get<UserService>(UserService);
//     });

//     it('should be defined', () => {
//         expect(service).toBeDefined();
//     });

//     describe('getAllUsers', () => {
//         it('should return an array of users without credentials', async () => {
//             // Mock the Users repository or database access
//             const User =  AppDataSource.getRepository(User1Entity)
//             const mockUsers: User1Entity[] = [];
//             let UserEntityInstance = new User1Entity()
//             UserEntityInstance.id=dummyOneUser.id
//             UserEntityInstance.name=dummyOneUser.name
//             UserEntityInstance.lname=dummyOneUser.lname
//             UserEntityInstance.age= dummyOneUser.age
//             UserEntityInstance.email=dummyOneUser.email
//             UserEntityInstance.password=dummyOneUser.password
//             const saveData= await User.save(UserEntityInstance)
//             mockUsers.push(saveData)
//             jest.spyOn(service,"getAllUsers").mockResolvedValue(mockUsers)          
//             const result = await service.getAllUsers();
//             expect(result).toEqual(mockUsers);
//         });
//     });
//     describe("GetUserById",()=>{
//         it("get user by id if it is exist",async()=>{
//             jest.spyOn(service,"getUserById").mockResolvedValue(dummyOneUser)
//             const result= await service.getUserById(dummyOneUser.id)
//             expect(result).toEqual(dummyOneUser)
//         })
//         it("when user not exist with this id",async()=>{
//             jest.spyOn(service,"getUserById").mockResolvedValue(null)
//             const result= await service.getUserById("999")
//             console.log("get user which not exist",result)
//             expect(result).toEqual(null)
//         })
//     })
//     describe("get user by mail",()=>{
//         it("should return user if it is found with email ",async()=>{
//             jest.spyOn(service,"getUserViaEmail").mockResolvedValue(dummyOneUser)
//             const result= await service.getUserViaEmail(dummyOneUser.email,dummyOneUser.password)
//             console.log({result})
//             expect(result).toEqual(dummyOneUser)
//         })
//         it("should return error message when user is not exist with this mail id",async()=>{
//             jest.spyOn(service,"getUserViaEmail").mockResolvedValue(null)
//             const result=await service.getUserViaEmail("abc@gmail.com","123@/")
//             console.log({result})
//             expect(result).toBe(null)
//         })
//     })
// });

